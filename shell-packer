#!/usr/bin/env bash
# Copyright (c) 2017, Cody Opel <codyopel@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o errexit
set -o errtrace
set -o functrace
set -o nounset
set -o pipefail

recurse_files() {
  local -r topdir="$1"
  local item

  if [ ! -d "$topdir" ]; then
    echo "directory does not exist: $topdir"
    return 1
  fi

  for item in "$topdir"/*;do
    item="${item//\/\//\/}"
    if [ -f "$item" ] && [[ "$item" =~ \.ba?sh$ ]]; then
      printf '%s\n' "$item"
    elif [ -d "$item" ]; then
      recurse_files "$item"
    fi
  done
}

autogenerated_header() {
  local -r file="$1"

  printf '%s\n%s\n\n' \
    '# This file was autogenerated by shell-packer' \
    '# https://github.com/chlorm/shell-packer' >> "$file"
}

license_header() {
  local -r file="$1"

  if [ -n "$LICENSE" ]; then
    if [ ! -f "$LICENSE" ]; then
      echo "specified license file does not exist: $LICENSE" >&2
      exit 1
    fi
    echo "> adding license header" >&2
    while IFS= read -r line; do
      if [ -z "$line" ]; then
        printf '#\n' >> "$file"
      else
        printf '# %s\n' "$line" >> "$file"
      fi
    done <"$LICENSE"
    printf '\n' >> "$file"
  fi
}

build_functions() {
  local -r dirs="$2"
  local -r file="$1"
  local srcfile
  local -a srcfiles
  local -a srcfileslist=()
  local srcdir
  local -a srcdirs
  local -a loadedfuncs=()
  local -a loadedfuncnames=()

  mapfile -t -d, srcdirs < <(printf '%s' "$dirs")

  for srcdir in "${srcdirs[@]}"; do
    if [ ! -d "$srcdir" ]; then
      echo "directory does not exist: $srcdir"
      return 1
    fi
    mapfile -t srcfiles < <(recurse_files "$srcdir")
    srcfileslist+=("${srcfiles[@]}")
  done

  # Find all function preloaded in bash
  mapfile -t loadedfuncs < <(bash -c 'declare -F')
  local -a t=()
  for i in "${loadedfuncs[@]}"; do
    mapfile -t -d" " t < <(printf '%s' "$i")
    loadedfuncnames+=("${t[2]}")
  done

  echo "> adding functions" >&2
  for srcfile in "${srcfileslist[@]}"; do
    echo "  $srcfile" >&2
    bash -c "
    # Unset any preloaded functions
    $(for i in "${loadedfuncnames[@]}"; do printf '%s\n' "unset $i"; done)
    $(<"$srcfile")
    declare -f
    " >> "$file"
  done
}

build_entry_points() {
  local entrypoint
  local -a entrypointslist
  local -r entrypoints="$2"
  local kv
  local -r srcdirs="$1"

  mapfile -t -d, entrypointslist < <(printf '%s' "$entrypoints")

  for entrypoint in "${entrypointslist[@]}"; do
    mapfile -t -d= kv < <(printf '%s' "$entrypoint")

    if [ ${#kv[@]} -ne 2 ]; then
      echo "malformed entrypoint key/value for: ${kv[0]}"
      return 1
    fi

    local -r executable="${kv[0]}"
    local -r entryfunc="${kv[1]}"

    printf '' > "$executable"

    if [ "${kv[1]}" != 'null' ]; then
      printf '> creating entrypoint: %s -> %s\n' "$executable" "$entryfunc" >&2
      printf '%s\n' "#!$INTERPRETER" >> "$executable"
    fi

    autogenerated_header "$executable"

    license_header "$executable"

    if [ -n "$RUNTIMEPATH" ]; then
      if [ "$entryfunc" != 'null' ]; then
        printf 'declare -r PATH="%s"\n\n' "$RUNTIMEPATH" >> "$executable"
      else
        # shellcheck disable=SC2016
        printf 'PATH="$PATH${PATH:+:}%s"\n\n' "$RUNTIMEPATH" >> "$executable"
      fi
    fi

    build_functions "$executable" "$srcdirs"
    printf '\n' >> "$executable"

    if [ "$entryfunc" != 'null' ]; then
      printf '%s "$@"\n' "$entryfunc" >> "$executable"
    fi
    printf '\n' >&2
  done
}

# String containing a comma separated list of directories.
declare -r SRCDIRS="${SRCDIRS:-src/}"
declare -r LICENSE="${LICENSE:-}"
# String containing a comma separated list of key=value pairs.
# If value is null, no shebang or function entrypoint are added.
declare -r ENTRYPOINTS="${ENTRYPOINTS:-}"
declare -r INTERPRETER="${INTERPRETER:-/usr/bin/env bash}"
# If set PATH is set to the value.  PATH is hardcoded for entrypoints.
declare -r RUNTIMEPATH="${RUNTIMEPATH:-}"

if [ -z "$ENTRYPOINTS" ]; then
  echo "ENTRYPOINTS not set" >&2
  exit 1
fi

build_entry_points "$SRCDIRS" "$ENTRYPOINTS"
